Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'               " 颜色 
Plugin 'scrooloose/nerdtree'                            " 文件显示
Plugin 'scrooloose/syntastic'                           " 语法检查
Plugin 'Xuyuanp/nerdtree-git-plugin'                    " 文件显示git
Plugin 'jistr/vim-nerdtree-tabs'                        " 文件标签管理
Plugin 'terryma/vim-expand-region'                      " 快速范围选中
Plugin 'vim-scripts/DoxygenToolkit.vim'                 " 注释
Plugin 'vim-airline/vim-airline'                        " airline
Plugin 'vim-airline/vim-airline-themes'                 " airline主题
Plugin 'tpope/vim-fugitive'                             " git
Plugin 'airblade/vim-gitgutter'                         " git
Plugin 'junegunn/vim-easy-align'						" 快速对齐
Plugin 'fatih/vim-go'									" golang
Plugin 'evanmiller/nginx-vim-syntax'					" nginx配置文件
Plugin 'Lokaltog/vim-easymotion'						" 强大的跳转
Plugin 'majutsushi/tagbar'                              " 代码导航
Plugin 'vim-scripts/matchit.zip'                        " html标签匹配
Plugin 'valloric/MatchTagAlways'                        " html标签高亮匹配
Plugin 'maksimr/vim-jsbeautify'                         " 格式化代码

" 插件相关
" syntastic {
    " dependence
    let g:syntastic_error_symbol='>>'
    let g:syntastic_warning_symbol='>'
    let g:syntastic_check_on_open=1
    let g:syntastic_check_on_wq=0
    let g:syntastic_enable_highlighting=1

    "set statusline+=%#warningmsg#
    "set statusline+=%{SyntasticStatuslineFlag()}
    "set statusline+=%*

    "let g:syntastic_always_populate_loc_list = 1
    "let g:syntastic_auto_loc_list = 1
    "let g:syntastic_check_on_open = 1
    "let g:syntastic_check_on_wq = 0
" }

" DoxygenToolkit {
    let g:DoxygenToolkit_briefTag_pre="@synopsis  "
	let g:DoxygenToolkit_paramTag_pre="@param "
	let g:DoxygenToolkit_returnTag="@return   "
	let g:DoxygenToolkit_authorName="zhaorui, zhaorui3@le.com"
" }

" MatchTagAlways {
    let g:mta_use_matchparen_group = 1
    let g:mta_filetypes = {
        \ 'html' : 1,
        \ 'xhtml' : 1,
        \ 'xml' : 1,
        \ 'php' : 1,
        \ 'jinja' : 1,
        \}
" }

" jsbeautify {
	map <F6> :call JsBeautify()<cr>
	" or
	autocmd FileType javascript noremap <buffer>  <F6> :call JsBeautify()<cr>
	" for json
	autocmd FileType json noremap <buffer> <F6> :call JsonBeautify()<cr>
	" for jsx
	autocmd FileType jsx noremap <buffer> <F6> :call JsxBeautify()<cr>
	" for html
	autocmd FileType html noremap <buffer> <F6> :call HtmlBeautify()<cr>
	" for css or scss
	autocmd FileType css noremap <buffer> <F6> :call CSSBeautify()<cr>
" }

" easymotion {
    let g:EasyMotion_smartcase = 1
    "let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><leader>l <Plug>(easymotion-lineforward)
    " 重复上一次操作, 类似repeat插件, 很强大
    map <Leader><leader>. <Plug>(easymotion-repeat)
" }

" easyalign {
    vmap <Leader>a <Plug>(EasyAlign)
    nmap <Leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" }
" expandregion {
    vmap v <Plug>(expand_region_expand)
    vmap V <Plug>(expand_region_shrink)
" }

" fugitive {
    " :Gdiff  :Gstatus :Gvsplit
    nnoremap <leader>ge :Gdiff<CR>
    " not ready to open
    " <leader>gb maps to :Gblame<CR>
    " <leader>gs maps to :Gstatus<CR>
    " <leader>gd maps to :Gdiff<CR>  和现有冲突
    " <leader>gl maps to :Glog<CR>
    " <leader>gc maps to :Gcommit<CR>
    " <leader>gp maps to :Git push<CR>
" }

" gitgutter {
    " 同git diff,实时展示文件中修改的行
    " 只是不喜欢除了行号多一列, 默认关闭,gs时打开
    let g:gitgutter_map_keys = 0
    let g:gitgutter_enabled = 0
    let g:gitgutter_highlight_lines = 1
    nnoremap <leader>gs :GitGutterToggle<CR>
" }

" nerdtree nerdtreetabs {
    map <Leader>e <plug>NERDTreeTabsToggle<CR>
    let NERDTreeHighlightCursorline = 1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    " 只有一个窗口的时候默认关闭
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
    let g:nerdtree_tabs_open_on_gui_startup = 1
    "let g:nerdtree_tabs_open_on_console_startup = 1
    let g:nerdtree_tabs_smart_startup_focus = 2
    let g:nerdtree_tabs_autoclose = 1
" }

" airline {
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
	let g:airline_theme = 'solarized'
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    " 是否打开tabline
    let g:airline#extensions#tabline#enabled = 1
" }

" solarized {
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    "let g:solarized_termcolors=256
" }

" TagBar {
    "autocmd VimEnter * TagbarToggle
	if isdirectory(expand("~/.vim/bundle/tagbar/"))
		nnoremap<leader>] :TagbarToggle<CR>
	endif
" }

